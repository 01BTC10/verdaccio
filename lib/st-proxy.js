var request = require('request');
var UError = require('./error').UserError;
var URL = require('url');

function Storage(config, mainconfig) {
	if (!(this instanceof Storage)) return new Storage(config);
	this.config = config;
	this.ua = mainconfig.user_agent;
	this.ca;

	this.url = URL.parse(this.config.url);
	if (this.url.hostname === 'registry.npmjs.org') {
		this.ca = require('./npmsslkeys');
		if (this.config._autogenerated) {
			// encrypt all the things!
			this.url.protocol = 'https';
			this.config.url = URL.format(this.url);
		}
	}

	this.config.url = this.config.url.replace(/\/$/, '');
	return this;
}

Storage.prototype.can_fetch_url = function(url) {
	url = URL.parse(url);

	return url.protocol === this.url.protocol
	    && url.host === this.url.host
	    && url.path === this.url.path
}

Storage.prototype.get_package = function(name, callback) {
	request({
		url: this.config.url + '/' + name,
		json: true,
		headers: {
			'User-Agent': this.ua,
		},
		ca: this.ca,
	}, function(err, res, body) {
		if (err) return callback(err);
		if (res.statusCode === 404) {
			return callback(new UError({
				msg: 'package doesn\'t exist on uplink',
				status: 404,
			}));
		}
		if (!(res.statusCode >= 200 && res.statusCode < 300)) {
			return callback(new Error('bad status code: ' + res.statusCode));
		}
		callback(null, body);
	});
}

Storage.prototype.get_tarball = function(name, filename, callback) {
	request({
		url: this.config.url + '/' + name + '/-/' + filename,
		headers: {
			'User-Agent': this.ua,
		},
		ca: this.ca,
		encoding: null,
	}, function(err, res, body) {
		if (err) return callback(err);
		if (res.statusCode === 404) {
			return callback(new UError({
				msg: 'file doesn\'t exist on uplink',
				status: 404,
			}));
		}
		if (!(res.statusCode >= 200 && res.statusCode < 300)) {
			return callback(new Error('bad status code: ' + res.statusCode));
		}
		callback(null, body);
	});
}

module.exports = Storage;

